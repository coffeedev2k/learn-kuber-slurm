# Default values for workbench.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.12"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: workbench.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: name-of-config-volume-that-we-create-from-configmap
    configMap:
      name: configmap-for-creating-volume

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: name-of-config-volume-that-we-create-from-configmap # мы делаем диск из конфигмапы, чтобы в каталог насоздавать файлов из текста и подмонитровать их в каталог.
                                                              # динамично не обновляется, добавляем файл, его нет на диске, поды не пересоздаются
    mountPath: /etc/nginx/conf.d/ # путь к каталогу внутри контейнера, который мы монтируем

nodeSelector: {}

tolerations: []

affinity: {}

readinessProbe:
  failureThreshold: 3 # ждем пока 3 раза зафейлится, пока принимать решение что нода фейлится
  httpGet: # httpGet это http проба, а может быть exec и тогда здесь может быть команда, также может быть проверка сокета
    path: /readiness # 200 - 399 коды ответа окей, а 400 и выше - фейлится
    port: 80
  periodSeconds: 10 # время между проверками
  successThreshold: 1 # какое количество сакцессов удостоверит, что контейнер работает
  timeoutSeconds: 1 # таймаут проверки
livenessProbe:
  failureThreshold: 3
  httpGet:
    path: /liveness
    port: 80
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
  initialDelaySeconds: 10 # ранняя версия стартап пробы, ждёт после запуска контейнера пока не начнёт исполняться лайвнесс проба
startupProbe:
  httpGet:
    path: /startup
    port: 80
  failureThreshold: 30 # 30 проваленных проверок
  periodSeconds: 10 # с периодом 10 секунд
