---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 2
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 10
      containers:
        - name: rabbitmq-k8s
          image: rabbitmq:3.7
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_NODENAME
              value: "rabbit@$(MY_POD_IP)" # одну переменную подставляем в часть другой - будет rabbit@1.1.1.1
            - name: K8S_SERVICE_NAME
              value: "rabbitmq"
            - name: RABBITMQ_ERLANG_COOKIE
              value: "mycookie"
          ports:
            - name: amqp
              protocol: TCP
              containerPort: 5672
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 10m
              memory: 256Mi
          livenessProbe:
            exec:
              command: ["rabbitmqctl", "status"] # запускаем в контенере нативно и проверяем статус выхода - если не 0, проба провалена
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 15
          readinessProbe:
            exec:
              command: ["rabbitmqctl", "status"]
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 10
          imagePullPolicy: Always
          volumeMounts:
            - name: config-volume
              mountPath: /etc/rabbitmq
            - name: data
              mountPath: /var/lib/rabbitmq
      volumes:
        - name: config-volume
          configMap:
            name: rabbitmq-config
            items:
              - key: rabbitmq.conf # имя файла, которое мы создаём внутри пода
                path: rabbitmq.conf # файл, который мы берём из config-volume, они могут быть разными со строчкой выше
              - key: enabled_plugins
                path: enabled_plugins
      affinity:
        podAntiAffinity: # метод максимально размазать поды по нодам кластера, не запускать их на одной ноде
                          # другой метод, podAffinity позволит запуститься рядом с кем-то, но его нечасто используют
          preferredDuringSchedulingIgnoredDuringExecution: # 3) страемся не запускать поды нашего сета на тех нодах, что отселектили в пункте 2 (с уже запущенным нашим приложением)
                                                            # значит по возможности запускаем их на всех остальных нодах кластера
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions: # 2) выбираем те, на которых вот такие условия(здесь мы свои же теги проверяем, то есть выделяем ноды с уже запущенным нашим приложением)
                    - key: app
                      operator: In
                      values:
                        - rabbitmq
                topologyKey: kubernetes.io/hostname # 1) берём все ноды, выбираем те, у которых есть хостнейм

      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution: # требование ДОЛЖНО выполниться в процессе назначения под по нодам, но игнорироваться если поды уже запущены
      #       nodeSelectorTerms:                            # если при реквайред услвие не выполняется, под висит в статусе пендинг
      #         - matchExpressions:
      #             - key: kubernetes.io/e2e-az-name  должен содержать либо "e2e-az1", либо "e2e-az2", тоесть мы хотим в этих двух зонах только запускать под
      #               operator: In
      #               values:
      #                 - e2e-az1
      #                 - e2e-az2

      # affinity:
      #   nodeAffinity:
      #     preferredDuringSchedulingIgnoredDuringExecution: # требование ЖЕЛАТЕЛЬНО выполниться в процессе назначения под по нодам, но игнорироваться если поды уже запущены
                                                              # если при префферед услвие не выполняется, под запустится всё равно
            # - weight: 1
      #         preference::
                # - matchExpressions:
                #     - key: key: another-node-label-key
                #       operator: Exists

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 20Mi
